// generated from rosidl_adapter_proto/resource/idl.proto.em
// with input from control_msgs:action/GripperCommand.idl
// generated code does not contain a copyright notice

syntax = "proto3";

package control_msgs.action.pb.jazzy;

import "builtin_interfaces/msg/time.proto";
import "control_msgs/msg/gripper_command.proto";
import "unique_identifier_msgs/msg/uuid.proto";

option cc_generic_services = true;

message GripperCommand_Goal
{

  control_msgs.msg.pb.jazzy.GripperCommand command = 1;
}


message GripperCommand_SendGoal_Request
{

  unique_identifier_msgs.msg.pb.jazzy.UUID         goal_id = 1;
  control_msgs.action.pb.jazzy.GripperCommand_Goal goal    = 2;
}


message GripperCommand_SendGoal_Response
{

  bool                                 accepted = 1;
  builtin_interfaces.msg.pb.jazzy.Time stamp    = 2;
}


message GripperCommand_Result
{


  //The current gripper gap size (in meters)
  double position     = 1;

  //The current effort exerted (in Newtons)
  double effort       = 2;

  //True iff the gripper is exerting max effort and not moving
  bool   stalled      = 3;

  //True iff the gripper position has reached the commanded setpoint
  bool   reached_goal = 4;
}


message GripperCommand_GetResult_Request
{

  unique_identifier_msgs.msg.pb.jazzy.UUID goal_id = 1;
}


message GripperCommand_GetResult_Response
{

  int32                                              status = 1;
  control_msgs.action.pb.jazzy.GripperCommand_Result result = 2;
}


message GripperCommand_Feedback
{


  //The current gripper gap size (in meters)
  double position     = 1;

  //The current effort exerted (in Newtons)
  double effort       = 2;

  //True iff the gripper is exerting max effort and not moving
  bool   stalled      = 3;

  //True iff the gripper position has reached the commanded setpoint
  bool   reached_goal = 4;
}


message GripperCommand_FeedbackMessage
{

  unique_identifier_msgs.msg.pb.jazzy.UUID             goal_id  = 1;
  control_msgs.action.pb.jazzy.GripperCommand_Feedback feedback = 2;
}


service GripperCommand
{
  rpc SendGoal (GripperCommand_SendGoal_Request) returns (GripperCommand_SendGoal_Response);
  rpc GetResult (GripperCommand_GetResult_Request) returns (GripperCommand_GetResult_Response);
}