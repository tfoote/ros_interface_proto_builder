// generated from rosidl_adapter_proto/resource/idl.proto.em
// with input from control_msgs:action/PointHead.idl
// generated code does not contain a copyright notice

syntax = "proto3";

package control_msgs.action.pb.jazzy;

import "builtin_interfaces/msg/duration.proto";
import "builtin_interfaces/msg/time.proto";
import "geometry_msgs/msg/point_stamped.proto";
import "geometry_msgs/msg/vector3.proto";
import "unique_identifier_msgs/msg/uuid.proto";

option cc_generic_services = true;

message PointHead_Goal
{

  geometry_msgs.msg.pb.jazzy.PointStamped  target         = 1;
  geometry_msgs.msg.pb.jazzy.Vector3       pointing_axis  = 2;
  string                                   pointing_frame = 3;
  builtin_interfaces.msg.pb.jazzy.Duration min_duration   = 4;
  double                                   max_velocity   = 5;
}


message PointHead_SendGoal_Request
{

  unique_identifier_msgs.msg.pb.jazzy.UUID    goal_id = 1;
  control_msgs.action.pb.jazzy.PointHead_Goal goal    = 2;
}


message PointHead_SendGoal_Response
{

  bool                                 accepted = 1;
  builtin_interfaces.msg.pb.jazzy.Time stamp    = 2;
}


message PointHead_Result
{

  uint32 structure_needs_at_least_one_member = 1;
}


message PointHead_GetResult_Request
{

  unique_identifier_msgs.msg.pb.jazzy.UUID goal_id = 1;
}


message PointHead_GetResult_Response
{

  int32                                         status = 1;
  control_msgs.action.pb.jazzy.PointHead_Result result = 2;
}


message PointHead_Feedback
{

  double pointing_angle_error = 1;
}


message PointHead_FeedbackMessage
{

  unique_identifier_msgs.msg.pb.jazzy.UUID        goal_id  = 1;
  control_msgs.action.pb.jazzy.PointHead_Feedback feedback = 2;
}


service PointHead
{
  rpc SendGoal (PointHead_SendGoal_Request) returns (PointHead_SendGoal_Response);
  rpc GetResult (PointHead_GetResult_Request) returns (PointHead_GetResult_Response);
}