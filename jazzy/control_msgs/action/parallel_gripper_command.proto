// generated from rosidl_adapter_proto/resource/idl.proto.em
// with input from control_msgs:action/ParallelGripperCommand.idl
// generated code does not contain a copyright notice

syntax = "proto3";

package control_msgs.action.pb.jazzy;

import "builtin_interfaces/msg/time.proto";
import "sensor_msgs/msg/joint_state.proto";
import "unique_identifier_msgs/msg/uuid.proto";

option cc_generic_services = true;

message ParallelGripperCommand_Goal
{

  sensor_msgs.msg.pb.jazzy.JointState command = 1;
}


message ParallelGripperCommand_SendGoal_Request
{

  unique_identifier_msgs.msg.pb.jazzy.UUID                 goal_id = 1;
  control_msgs.action.pb.jazzy.ParallelGripperCommand_Goal goal    = 2;
}


message ParallelGripperCommand_SendGoal_Response
{

  bool                                 accepted = 1;
  builtin_interfaces.msg.pb.jazzy.Time stamp    = 2;
}


message ParallelGripperCommand_Result
{


  //The current gripper state.
  sensor_msgs.msg.pb.jazzy.JointState state        = 1;

  //position of each joint (radians or meters)
  //optional: velocity of each joint (radians or meters / second)
  //optional: effort of each joint (Newtons or Newton-meters)
  //True if the gripper is exerting max effort and not moving
  bool                                stalled      = 2;

  //True if the gripper position has reached the commanded setpoint
  bool                                reached_goal = 3;
}


message ParallelGripperCommand_GetResult_Request
{

  unique_identifier_msgs.msg.pb.jazzy.UUID goal_id = 1;
}


message ParallelGripperCommand_GetResult_Response
{

  int32                                                      status = 1;
  control_msgs.action.pb.jazzy.ParallelGripperCommand_Result result = 2;
}


message ParallelGripperCommand_Feedback
{


  //The current gripper state.
  sensor_msgs.msg.pb.jazzy.JointState state = 1;
}


message ParallelGripperCommand_FeedbackMessage
{

  unique_identifier_msgs.msg.pb.jazzy.UUID                     goal_id  = 1;
  control_msgs.action.pb.jazzy.ParallelGripperCommand_Feedback feedback = 2;
}


service ParallelGripperCommand
{
  rpc SendGoal (ParallelGripperCommand_SendGoal_Request) returns (ParallelGripperCommand_SendGoal_Response);
  rpc GetResult (ParallelGripperCommand_GetResult_Request) returns (ParallelGripperCommand_GetResult_Response);
}